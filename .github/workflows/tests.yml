name: Tests
on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'test/**'
      - 'yarn.lock'
      - '.github/workflows/unit-tests.yml'
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'src/**'
      - 'test/**'
      - 'yarn.lock'
      - '.github/workflows/unit-tests.yml'

jobs:
  dependencies:
    name: Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Get yarn cache directory path
        run: "
          yarn --version\n
          echo Yarn cache folder:\n
          yarn config get cacheFolder\n
          echo Y_CACHE_DIR=$(yarn config get cacheFolder) >> $GITHUB_ENV
        "

      - uses: actions/cache/restore@v3
        with:
          fail-on-cache-miss: false
          path: ${{ env.Y_CACHE_DIR }}
          key: yarn-cache

      - uses: actions/cache/restore@v3
        with:
          fail-on-cache-miss: false
          path: |
            node_modules
            /home/runner/.cache/Cypress
          key: node-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        run: yarn --immutable

      # This stores our yarn cache, so that we don't have to go out to the network to fetch packages we already
      # have in the cache. It's not super important that it's in sync with yarn.lock all the time, it just matters
      # that we keep it somewhat up to date.
      - uses: actions/cache/save@v3
        with:
          path: ${{ env.Y_CACHE_DIR }}
          key: yarn-cache

      # This caches our node packages so that we don't have to run `yarn install` again later in this workflow.
      # We use yarn.lock as the cache key, so that the cache is invalidated when there are new dependencies.
      - uses: actions/cache/save@v3
        with:
          path: |
            node_modules
            /home/runner/.cache/Cypress
          key: node-modules-${{ hashFiles('**/yarn.lock') }}

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [ dependencies ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - uses: actions/cache/restore@v3
        with:
          fail-on-cache-miss: true
          path: |
            node_modules
            /home/runner/.cache/Cypress
          key: node-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Build
        run: yarn build:cypressCoverage

      # This caches node_modules and dist, so that we can re-use these results in subsequent test runs.
      # The cache key is unique to this workflow run, so the same results are only used in the tests below,
      # and will never be re-used across different runs (unlike the yarn cache above).
      - uses: actions/cache/save@v3
        with:
          path: dist
          key: dist-${{ github.run_id }}

  cypress:
    name: Cypress
    runs-on: ubuntu-latest
    needs: [ build ]
    strategy:
      fail-fast: false
      matrix:
        machines: [ 1, 2, 3, 4, 5 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Increase file watchers
        run: echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - uses: actions/cache/restore@v3
        with:
          fail-on-cache-miss: true
          path: |
            node_modules
            /home/runner/.cache/Cypress
          key: node-modules-${{ hashFiles('**/yarn.lock') }}

      # TODO: Re-introduce non-matrix runner for external PRs
      - name: Run end-to-end Cypress tests
        run: "
          export CYPRESS_PROJECT_ID=y2jhp6\n
          export CYPRESS_RECORD_KEY=${{ secrets.CYPRESS_RECORD_KEY }}\n
          export GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}\n
          yarn run cy:verify\n
          bash -c 'cd dist/; npx http-server -p 8080 --cors >/dev/null &'\n
          bash -c 'yarn run cy:test:all:headless
            --config watchForFileChanges=false
            --env environment=tt02,testUserName=testuserexternal,testUserPwd=r@h74Rz7XYQJ
            --parallel
            --record
            --tag altinn-app-frontend
            --group altinn-app-frontend
            --ci-build-id $GITHUB_RUN_ID-$GITHUB_RUN_ATTEMPT
          '
        "

      - uses: actions/upload-artifact@v3
        with:
          name: coverage-cypress-${{ strategy.job-index }}
          path: coverage/cypress/coverage-final.json

      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: redux-state-history
          path: test/redux-history/*.json

  unit-tests:
    name: Unit tests
    runs-on: ubuntu-latest
    needs: [ dependencies ]
    strategy:
      fail-fast: false
      matrix:
        machines: [ 1, 2 ]
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: install node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - uses: actions/cache/restore@v3
        with:
          fail-on-cache-miss: true
          path: |
            node_modules
            /home/runner/.cache/Cypress
          key: node-modules-${{ hashFiles('**/yarn.lock') }}

      - name: run tests
        run: "
          npx jest --listTests --json
            | jq '[_nwise(length / ${{ strategy.job-total }} | ceil)]'
            | jq '.[${{ strategy.job-index }}] | .[] | @text'
            | xargs yarn test --coverage --runInBand
        "

      - uses: actions/upload-artifact@v3
        with:
          name: coverage-jest-${{ strategy.job-index }}
          path: coverage/jest/coverage-final.json

  linting:
    name: Linting
    runs-on: ubuntu-latest
    needs: [ dependencies ]
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: install node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - uses: actions/cache/restore@v3
        with:
          fail-on-cache-miss: true
          path: |
            node_modules
            /home/runner/.cache/Cypress
          key: node-modules-${{ hashFiles('**/yarn.lock') }}

      - name: run eslint
        run: yarn lint

  type-checks:
    name: Type-checks
    runs-on: ubuntu-latest
    needs: [ dependencies ]
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: install node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - uses: actions/cache/restore@v3
        with:
          fail-on-cache-miss: true
          path: |
            node_modules
            /home/runner/.cache/Cypress
          key: node-modules-${{ hashFiles('**/yarn.lock') }}

      - name: type-check
        run: yarn tsc

  sonar-cloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    needs: [ cypress, unit-tests ]
    if: |
      github.event_name == 'pull_request' &&
      github.repository_owner == 'Altinn' &&
      (github.event_name != 'pull_request' && github.event.repository.fork == false) ||
      (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false)
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          path: app-frontend
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: install node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - uses: actions/cache/restore@v3
        with:
          fail-on-cache-miss: true
          path: |
            node_modules
            /home/runner/.cache/Cypress
          key: node-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3
        with:
          path: all-artifacts

      - name: TODO
        run:
          echo "Pretending to upload to SonarCloud at this point"\n
          ls -lR all-artifacts/

# TODO: Fetch coverage from previous steps, merge them
#      - name: SonarCloud Scan
#        with:
#          projectBaseDir: .
#        uses: SonarSource/sonarcloud-github-action@master
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
