import fs from 'node:fs';
import path from 'node:path';

import { saveFile } from 'src/codegen/tools';

const stage1 = {};

fs.readdirSync('src/layout').forEach((item) => {
  try {
    const stat = fs.statSync(path.join('src/layout', item));
    if (stat.isDirectory()) {
      if (item === 'Address') {
        // Address is a special case, because we once named it 'AddressComponent', without any over the other components
        // having that suffix. We need to keep this for backwards compatibility, but our folder structure uses the name
        // without the suffix.
        stage1[item] = 'AddressComponent';
        return;
      }

      stage1[item] = item;
    }
  } catch (e) {
    // Intentionally empty
  }
});

const sortedKeys = Object.keys(stage1).sort((a, b) => a.localeCompare(b));
const componentIndex = [
  '// This file is generated by running `yarn gen`',
  '',

  ...sortedKeys.map((key) => `import { Config as ${key}Config } from 'src/layout/${key}/index';`),
  ...sortedKeys.map((key) => `import type { TypeConfig as ${key}TypeConfig } from 'src/layout/${key}/index';`),
  '',
  `export const ComponentConfigs = {`,

  ...sortedKeys.map((key) => `  ${stage1[key]}: ${key}Config,`),
  `};`,
  '',
  `export type ComponentTypeConfigs = {`,

  ...sortedKeys.map((key) => `  ${stage1[key]}: ${key}TypeConfig;`),
  `};`,
];

const componentGeneratorIndex = [
  '// This file is generated by running `yarn gen`',
  '',
  ...sortedKeys.map((key) => `import { Generator as ${key}Generator } from '../layout/${key}/config';`),
  '',
  `export const ComponentConfigGenerators = {`,
  ...sortedKeys.map((key) => `  ${stage1[key]}: ${key}Generator.setName('${key}'),`),
  `};`,
];

saveFile('src/layout/components.generated.ts', componentIndex.join('\n'));
saveFile('src/codegen/generators.generated.ts', componentGeneratorIndex.join('\n'));
