import type { JSONSchema7 } from 'json-schema';

import { CodeGenerator } from 'src/codegen/CodeGenerator';
import { CodeGeneratorContext, TsVariant } from 'src/codegen/CodeGeneratorContext';

/**
 * Generates a type that is one of two types, depending on the current variant of typescript code we're generating (i.e.
 * one of the types being used when expressions are unresolved, and another being used when they are resolved).
 *
 * This is useful for 'children', for example, where the unresolved type is a list of strings (component IDs), and the
 * resolved type is a list of LayoutNode objects (as generated by the hiearchy generator).
 */
export class GenerateLinked<
  Unresolved extends CodeGenerator<any>,
  Resolved extends CodeGenerator<any>,
> extends CodeGenerator<Unresolved> {
  constructor(
    public readonly unresolved: Unresolved,
    public readonly resolved: Resolved,
  ) {
    super();
  }

  transformToResolved(): this | CodeGenerator<any> {
    return this.resolved;
  }

  _toTypeScript(): string {
    if (CodeGeneratorContext.getTypeScriptInstance().variant === TsVariant.Unresolved) {
      return this.unresolved._toTypeScript();
    }

    // We cannot just call this.resolved._toTypeScript() here, because that would just fool us. All types should be
    // deeply transformed to resolved mode instead. This exception is just thrown to guard against mistakes.
    throw new Error('Cannot generate TypeScript for linked type in resolved mode - call transformToResolved() first');
  }

  toJsonSchema(): JSONSchema7 {
    return this.unresolved.toJsonSchema();
  }

  containsExpressions(): boolean {
    // This does not contain expressions itself, but it should be treated as if it does, because we need to output
    // different types depending on the output variant.
    return true;
  }
}
