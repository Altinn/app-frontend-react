import type { JSONSchema7 } from 'json-schema';

import { CodeGenerator } from 'src/codegen/CodeGenerator';
import { CodeGeneratorContext } from 'src/codegen/CodeGeneratorContext';

/**
 * Generates a type that is one of two types, depending on the current variant of typescript code we're generating (i.e.
 * one of the types being used when expressions are unresolved, and another being used when they are resolved).
 *
 * This is useful for 'children', for example, where the unresolved type is a list of strings (component IDs), and the
 * resolved type is a list of LayoutNode objects (as generated by the hiearchy generator).
 */
export class GenerateLinked<
  Unresolved extends CodeGenerator<any>,
  Resolved extends CodeGenerator<any>,
> extends CodeGenerator<Unresolved> {
  constructor(
    public readonly unresolved: Unresolved,
    public readonly resolved: Resolved,
  ) {
    super();
  }

  _toTypeScript(): string {
    if (CodeGeneratorContext.getTypeScriptInstance().variant === 'unresolved') {
      return this.unresolved._toTypeScript();
    }

    return this.resolved._toTypeScript();
  }

  toJsonSchema(): JSONSchema7 {
    return this.unresolved.toJsonSchema();
  }

  containsExpressions(): boolean {
    return this.unresolved.containsExpressions() || this.resolved.containsExpressions();
  }
}
